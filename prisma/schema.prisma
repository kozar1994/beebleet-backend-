generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(cuid())
  email                 String         @unique
  name                  String?
  subscriptions         Subscription[] @relation("UserSubscriptions") // для історії
  // нове поле — посилання на активну підписку (nullable)
  activeSubscriptionId  String? @unique
  activeSubscription    Subscription?  @relation("ActiveSubscription", fields: [activeSubscriptionId], references: [id])

  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}


model Plan {
  id              String         @id @default(cuid())
  slug            String         @unique
  name            String
  pricePerMonth   Decimal        @db.Decimal(10, 2) //ціна за місяць в Decimal
  qrLimit         Int // monthly quota for QR codes
  description     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subscriptions   Subscription[]
  fromPlanChanges PlanChange[]   @relation("FromPlan")
  toPlanChanges   PlanChange[]   @relation("ToPlan")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIAL
  // якись з цих двох статусів при першому ствроні статуст що пітписка є але не була оплачена ще
  PENDING 
  AWAITING_PAYMENT 
}

model Subscription {
  id                  String               @id @default(cuid())
  
  user                User                 @relation("UserSubscriptions", fields: [userId], references: [id])
  userId              String
  plan                Plan                 @relation(fields: [planId], references: [id])
  planId              String
  status              SubscriptionStatus   @default(AWAITING_PAYMENT)
  startDate           DateTime // коли вперше була активована підписка (UTC)
  currentPeriodStart  DateTime // початок поточного періоду (UTC)
  currentPeriodEnd    DateTime // кінець поточного періоду (UTC)
  quantity            Int                  @default(1)
  autoRenew           Boolean              @default(true)

  billingTransactions BillingTransaction[]
  planChanges         PlanChange[]
  invoices            Invoice[]

  // зворотня сторона для activeSubscription
  activeFor           User?                @relation("ActiveSubscription")

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@index([userId])
  @@index([planId])
}

enum TransactionType {
  CHARGE
  CREDIT
  REFUND
  ADJUSTMENT
}

model BillingTransaction {
  id             String          @id @default(cuid())
  subscription   Subscription    @relation(fields: [subscriptionId], references: [id])
  subscriptionId String

  invoice        Invoice?        @relation(fields: [invoiceId], references: [id])
  invoiceId      String?
  planChange     PlanChange?     @relation("BillingTransactionToPlanChange", fields: [planChangeId], references: [id])
  planChangeId   String?         @unique
  type           TransactionType
  amount         Decimal         @db.Decimal(10, 2)
  currency       String          @default("USD")
  description    String?
  createdAt      DateTime        @default(now())

  // TODO: або сюди зберігатиму лінки або потім добавлю в Invoice подумай

  @@index([subscriptionId])
  @@index([createdAt])
}

model Invoice {
  id             String               @id @default(cuid())
  subscription   Subscription?         @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  total          Decimal              @db.Decimal(10, 2)
  issuedAt       DateTime             @default(now())
  dueDate        DateTime?
  paid           Boolean              @default(false)
  stripeSessionId String?             @unique
  stripePaymentId String?
  transactions   BillingTransaction[]

  @@index([subscriptionId])
  @@index([stripeSessionId])
}

enum PlanChangeStatus {
  PENDING
  COMPLETED
  REJECTED
}

model PlanChange {
  id                 String              @id @default(cuid())
  subscription       Subscription        @relation(fields: [subscriptionId], references: [id])
  subscriptionId     String
  fromPlan           Plan                @relation("FromPlan", fields: [fromPlanId], references: [id])
  fromPlanId         String
  toPlan             Plan                @relation("ToPlan", fields: [toPlanId], references: [id])
  toPlanId           String
  requestedAt        DateTime            @default(now())
  effectiveAt        DateTime?
  processedAt        DateTime?
  status             PlanChangeStatus    @default(PENDING)
  // пропорційна сума (додатне значення означає, що клієнт отримує кредит), але краще взагалі не позволяти план міняти на менший
  prorationAmount    Decimal?            @db.Decimal(10, 2)
  reason             String?
  processedBy        String?
  createdAt          DateTime            @default(now())
  billingTransaction BillingTransaction? @relation("BillingTransactionToPlanChange")

  @@index([subscriptionId])
}